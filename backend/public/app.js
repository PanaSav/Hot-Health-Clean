/* global MediaRecorder */
const $ = (s)=>document.querySelector(s);
const btnRec   = $('#btnRec');
const meta     = $('#recMeta');
const out      = $('#result');
const errBox   = $('#error');
const actions  = $('#actions');
const openLink = $('#openLink');
const gmailLink= $('#gmailLink');
const outlookLink = $('#outlookLink');
const copyBtn  = $('#copyBtn');
const printBtn = $('#printBtn');

let mediaRecorder, chunks = [], autoTimer = null;

function setError(msg){ errBox.textContent = msg || ''; }
function setMeta(msg){  meta.textContent  = msg || ''; }

function gatherForm() {
  return {
    // patient + options
    name:       $('#pName').value.trim(),
    email:      $('#pEmail').value.trim(),
    emer_name:  $('#eName').value.trim(),
    emer_phone: $('#ePhone').value.trim(),
    emer_email: $('#eEmail').value.trim(),
    blood_type: $('#blood').value.trim(),
    lang:       $('#lang').value.trim(),

    // doctor
    doc_name:   $('#docName').value.trim(),
    doc_phone:  $('#docPhone').value.trim(),
    doc_fax:    $('#docFax').value.trim(),
    doc_email:  $('#docEmail').value.trim(),
    doc_addr:   $('#docAddr').value.trim(),

    // pharmacy
    ph_name:    $('#phName').value.trim(),
    ph_phone:   $('#phPhone').value.trim(),
    ph_fax:     $('#phFax').value.trim(),
    ph_email:   $('#phEmail').value.trim(),
    ph_addr:    $('#phAddr').value.trim(),

    // six mini dictations (text only; backend may ignore today)
    bp_text:         $('#bpText').value.trim(),
    meds_text:       $('#medsText').value.trim(),
    allergies_text:  $('#allergiesText').value.trim(),
    weight_text:     $('#weightText').value.trim(),
    conditions_text: $('#conditionsText').value.trim(),
    general_text:    $('#generalText').value.trim(),
  };
}

async function uploadBlob(blob) {
  const fd = new FormData();
  fd.append('audio', blob, 'recording.webm');
  const data = gatherForm();
  for (const [k,v] of Object.entries(data)) fd.append(k, v);
  const r = await fetch('/upload', { method:'POST', body: fd });
  if (!r.ok) {
    const text = await r.text().catch(()=> '');
    throw new Error(`Upload failed (${r.status}): ${text || 'Server error'}`);
  }
  return r.json();
}

function setActions(url) {
  actions.classList.remove('hidden');
  openLink.href = url;

  // email links
  const subject = encodeURIComponent('Hot Health — Shareable Report');
  const body    = encodeURIComponent(`Here is the report link:\n\n${url}\n\n(Generated by Hot Health)`);
  gmailLink.href   = `https://mail.google.com/mail/?view=cm&fs=1&su=${subject}&body=${body}`;
  outlookLink.href = `https://outlook.live.com/owa/?path=/mail/action/compose&subject=${subject}&body=${body}`;

  copyBtn.onclick = async () => {
    try { await navigator.clipboard.writeText(url); copyBtn.textContent='Copied!'; setTimeout(()=>copyBtn.textContent='Copy Link',1000); }
    catch { alert('Copy failed'); }
  };
  printBtn.onclick = () => {
    // best reliability: open the report, let user print from that page
    window.open(url, '_blank', 'noopener');
  };
}

async function startRec() {
  setError('');
  setMeta('');
  chunks = [];
  let stream;
  try {
    stream = await navigator.mediaDevices.getUserMedia({ audio: true });
  } catch {
    setError('Microphone blocked. Allow mic permission and try again.');
    return;
  }
  mediaRecorder = new MediaRecorder(stream, { mimeType: 'audio/webm' });
  mediaRecorder.ondataavailable = e => { if (e.data && e.data.size) chunks.push(e.data); };
  mediaRecorder.onstop = async () => {
    try {
      clearTimeout(autoTimer); autoTimer = null;
      const blob = new Blob(chunks, { type: 'audio/webm' });
      setMeta(`Recorded ${(blob.size/1024).toFixed(1)} KB`);
      const json = await uploadBlob(blob);
      if (!json.ok) throw new Error(json.error || 'Server error');
      out.innerHTML = `✅ Report created.`;
      setActions(json.url);
    } catch (e) {
      setError(e.message || String(e));
    } finally {
      mediaRecorder.stream.getTracks().forEach(t=>t.stop());
      btnRec.textContent = '● Record';
      btnRec.classList.add('primary');
    }
  };
  mediaRecorder.start();
  btnRec.textContent = '■ Stop';
  btnRec.classList.remove('primary');
  setMeta('Recording… tap Stop when done.');
  // 30s auto-stop
  autoTimer = setTimeout(()=>{ if (mediaRecorder && mediaRecorder.state==='recording') mediaRecorder.stop(); }, 30000);
}

function stopRec() {
  if (mediaRecorder && mediaRecorder.state === 'recording') {
    mediaRecorder.stop();
  }
}

btnRec.addEventListener('click', () => {
  if (!mediaRecorder || mediaRecorder.state === 'inactive') startRec();
  else stopRec();
});

/* Dictation mics for inputs (Web Speech API) */
(() => {
  const SR = window.SpeechRecognition || window.webkitSpeechRecognition;
  document.querySelectorAll('.mic-btn').forEach(btn => {
    const targetId = btn.getAttribute('data-target');
    const el = document.getElementById(targetId);
    if (!SR || !el) { btn.disabled = true; btn.title = 'Voice input not supported by this browser.'; return; }

    btn.addEventListener('click', () => {
      const rec = new SR();
      rec.lang = 'en-US';
      rec.interimResults = false;
      rec.maxAlternatives = 1;

      const orig = btn.textContent;
      btn.textContent = '⏺';
      btn.disabled = true;

      let originalBg = el.style.backgroundColor;
      el.style.backgroundColor = '#fff7cc';

      rec.onresult = (e) => {
        const text = (e.results[0] && e.results[0][0] && e.results[0][0].transcript) || '';
        if (el.tagName === 'SELECT') {
          const opt = [...el.options].find(o => o.textContent.toLowerCase().includes(text.toLowerCase()));
          if (opt) el.value = opt.value;
        } else if (el.tagName === 'TEXTAREA' || el.tagName === 'INPUT') {
          // Post-process a few common speech quirks for emails and symbols
          let cleaned = text
            .replace(/\s+at\s+symbol\s+/ig, '@')
            .replace(/\s+at\s+/ig, '@')
            .replace(/\s+dot\s+/ig, '.')
            .replace(/\s+dash\s+/ig, '-')
            .replace(/\s+underscore\s+/ig, '_')
            .replace(/\s+plus\s+/ig, '+');
          if (el.value) el.value = (el.value + ' ' + cleaned).trim();
          else el.value = cleaned.trim();
        }
      };
      rec.onend = () => {
        btn.textContent = orig;
        btn.disabled = false;
        el.style.backgroundColor = originalBg;
      };
      rec.onerror = () => {
        btn.textContent = orig;
        btn.disabled = false;
        el.style.backgroundColor = originalBg;
      };

      try { rec.start(); } catch {
        btn.textContent = orig;
        btn.disabled = false;
        el.style.backgroundColor = originalBg;
      }
    });
  });
})();
